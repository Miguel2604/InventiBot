-- =============================================================
-- SUPERBASE SCHEMA FOR PROPERTY MANAGEMENT CHATBOT
-- Version: 2.0 (Invite-based login flow)
-- =============================================================

-- =============================================================
-- 0. HELPER FUNCTION
-- =============================================================
-- Creates a function that automatically updates the `updated_at` timestamp.
-- This is a common pattern in Supabase projects.

CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- =============================================================
-- 1. ENUM TYPE DEFINITIONS
-- =============================================================
-- We create custom types to ensure data consistency for status fields.

CREATE TYPE public.invite_status_type AS ENUM ('pending', 'completed');
CREATE TYPE public.status_type AS ENUM ('active', 'handoff', 'closed');
CREATE TYPE public.request_category_type AS ENUM ('Plumbing', 'Electrical', 'Appliance', 'General');
CREATE TYPE public.urgency_type AS ENUM ('Low', 'Medium', 'High');
CREATE TYPE public.request_status_type AS ENUM ('Submitted', 'Technician Assigned', 'Completed', 'Cancelled');
CREATE TYPE public.booking_status_type AS ENUM ('Confirmed', 'Cancelled');
CREATE TYPE public.visitor_status_type AS ENUM ('Registered', 'Arrived', 'Cancelled');
CREATE TYPE public.incident_type AS ENUM ('Security Concern', 'Safety Hazard', 'Noise Complaint');


-- =============================================================
-- 2. CORE STRUCTURE & USER TABLES
-- =============================================================

-- Table: buildings
CREATE TABLE public.buildings (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    address text,
    created_at timestamptz NOT NULL DEFAULT now()
);

-- Table: units
CREATE TABLE public.units (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    building_id uuid NOT NULL REFERENCES public.buildings(id) ON DELETE CASCADE,
    unit_number text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (building_id, unit_number)
);

-- Table: invites
-- For pre-registering tenants with a unique login code.
CREATE TABLE public.invites (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    unit_id uuid NOT NULL REFERENCES public.units(id) ON DELETE CASCADE,
    full_name text,
    login_code text NOT NULL UNIQUE,
    status public.invite_status_type NOT NULL DEFAULT 'pending',
    created_at timestamptz NOT NULL DEFAULT now(),
    expires_at timestamptz NOT NULL DEFAULT now() + interval '30 days'
);

-- Table: profiles
-- Extends Supabase's auth.users table with app-specific data.
CREATE TABLE public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    unit_id uuid REFERENCES public.units(id) ON DELETE SET NULL,
    full_name text,
    phone_number text,
    is_manager boolean NOT NULL DEFAULT FALSE,
    chat_platform_id text UNIQUE, -- Crucial link to the chatbot user ID
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Trigger to automatically update the `updated_at` timestamp for profiles.
CREATE TRIGGER on_profiles_updated
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- Table: conversations
CREATE TABLE public.conversations (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    manager_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
    status public.status_type NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Trigger for conversations `updated_at`
CREATE TRIGGER on_conversations_updated
  BEFORE UPDATE ON public.conversations
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();


-- =============================================================
-- 3. FEATURE TABLES
-- =============================================================

-- Table: maintenance_requests
CREATE TABLE public.maintenance_requests (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    unit_id uuid NOT NULL REFERENCES public.units(id) ON DELETE CASCADE,
    ticket_number bigint GENERATED BY DEFAULT AS IDENTITY UNIQUE,
    category public.request_category_type NOT NULL,
    specific_issue text NOT NULL,
    urgency public.urgency_type NOT NULL,
    status public.request_status_type NOT NULL DEFAULT 'Submitted',
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NOT NULL DEFAULT now()
);

-- Trigger for maintenance_requests `updated_at`
CREATE TRIGGER on_maintenance_requests_updated
  BEFORE UPDATE ON public.maintenance_requests
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- Table: maintenance_request_media
-- Stores paths to files in Supabase Storage.
CREATE TABLE public.maintenance_request_media (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    request_id uuid NOT NULL REFERENCES public.maintenance_requests(id) ON DELETE CASCADE,
    file_path text NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now()
);

-- Table: amenities
CREATE TABLE public.amenities (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    building_id uuid NOT NULL REFERENCES public.buildings(id) ON DELETE CASCADE,
    name text NOT NULL,
    description text,
    image_url text,
    booking_duration_hours integer NOT NULL DEFAULT 2,
    UNIQUE (building_id, name)
);

-- Table: bookings
CREATE TABLE public.bookings (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    amenity_id uuid NOT NULL REFERENCES public.amenities(id) ON DELETE CASCADE,
    start_time timestamptz NOT NULL,
    end_time timestamptz NOT NULL,
    status public.booking_status_type NOT NULL DEFAULT 'Confirmed',
    created_at timestamptz NOT NULL DEFAULT now(),
    UNIQUE (amenity_id, start_time)
);

-- Other feature tables...
-- (The structure for visitors, deliveries, incidents, alerts, and FAQs
-- from the previous answer can be added here following the same public.* pattern.)


-- =============================================================
-- 4. INDEXES
-- =============================================================
-- Create indexes on frequently queried columns for better performance.

CREATE INDEX idx_invites_login_code ON public.invites(login_code);
CREATE INDEX idx_profiles_chat_platform_id ON public.profiles(chat_platform_id);
CREATE INDEX idx_maintenance_requests_user_id ON public.maintenance_requests(user_id);
CREATE INDEX idx_bookings_user_id ON public.bookings(user_id);


-- =============================================================
-- 5. IMPORTANT NEXT STEPS: SECURITY
-- =============================================================
-- After running this script, you MUST enable Row Level Security (RLS)
-- on your tables and create policies. The app will not be secure
-- without this step.

-- EXAMPLE RLS POLICIES (Uncomment and adapt after enabling RLS in the Supabase UI)

-- -- 1. Profiles Table RLS
-- -- Users can view their own profile.
-- ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Users can view their own profile" ON public.profiles
--   FOR SELECT USING (auth.uid() = id);
-- -- Users can update their own profile.
-- CREATE POLICY "Users can update their own profile" ON public.profiles
--   FOR UPDATE USING (auth.uid() = id);

-- -- 2. Maintenance Requests Table RLS
-- -- Users can see their own maintenance requests.
-- ALTER TABLE public.maintenance_requests ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY "Users can view their own requests" ON public.maintenance_requests
--   FOR SELECT USING (auth.uid() = user_id);
-- -- Users can create requests for themselves.
-- CREATE POLICY "Users can create requests" ON public.maintenance_requests
--   FOR INSERT WITH CHECK (auth.uid() = user_id);

-- -- 3. Supabase Storage Policies
-- -- For tables like `maintenance_request_media`, you must also create
-- -- policies on your Storage Buckets. For example, create a bucket named 'maintenance_media'
-- -- and add a policy that only allows an authenticated user to upload files into a
-- -- folder that matches their user_id.
